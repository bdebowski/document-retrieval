  CONTENTS
=+=+=+=+=+=+=+=+
- Three scripts 'preprocess.py', 'index.py', and 'retrieve.py'
    Use these to create the search engine contents and then run the search engine
- documents.txt
    The documents/articles which will be indexed by the search engine
- A 'lib' folder containing the grunt work of code that does the majority of the work
- This README


  REQUIREMENTS
=+=+=+=+=+=+=+=+
- Python 3.7 or newer
- nltk
- ply
- curses (this is installed by default on unix/macOs machines, but on windows machines you will need to 'pip install windows-curses')
- the nltk PorterStemmer >>>> nltk.download("PorterStemmer")
- the nltk stopwords list >>>> nltk.download("stopwords")


  USAGE
=+=+=+=+=+=+=+=+
All 3 scripts described below are built to operate without the need to explicitly provide input arguments.  They do this by relying on default values for their optional arguments.
To use the 3 scripts with their default argument values it is assumed that:
    - there exists a 'documents.txt' file in the same directory
    - the 3 scripts are run in succession, waiting for one to complete before starting the other
    - that the output file(s) generated by any script are not modified in name

1. $ python preprocess.py
    Preprocessed the input file of documents and generates a processed output file.
    Type:
        $ python preprocess.py --help
    to see a list of commands.

2. $ python index.py
    Indexes the terms and documents from the processed documents file.  Creates three output files which will be consumed by the next script.
    Type:
        $ python index.py --help
    to see a list of commands.

3. $  python retrieve.py
    Runs the online search engine via an interactive command line interface.
    Type:
        $ python retrieve.py --help
    to see a list of commands.


  TESTING
=+=+=+=+=+=+=+=+
Limited testing was applied by selecting several documents as test cases.
For each such document, a query was constructed containing 8 - 10 words that were intuitively significant and unique to that document.
Each query was run and it was ensured that the desired document was the top result.
